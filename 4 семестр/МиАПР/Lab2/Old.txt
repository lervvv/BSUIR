private double GetDeviason(KMeansClass kMeansClass, Point centerCandidate)
        {
            return
                Math.Sqrt(
                    kMeansClass.Points.Aggregate<Point, double>(0,
                        (averadge, x) => averadge + Sqr(GetPointsInstance(centerCandidate, x)))/kMeansClass.Points.Count);
        }


/*private Point GetBestClassCenter(KMeansClass kMeansClass)
        {
            double minDifferent = Double.MaxValue;
            Point minDifferentPoint = null;
            foreach (Point centerCandidate in kMeansClass.Points)
            {
                double differen = GetDeviason(kMeansClass, centerCandidate);
                if (differen < minDifferent)
                {
                    minDifferent = differen;
                    minDifferentPoint = centerCandidate;
                }
            }
            return minDifferentPoint;
        }*/